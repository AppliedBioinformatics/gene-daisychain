# Convert protein homology clustering into a CSV file format
# that can be imported by Neo4j
# Protein names in homology group are mapped to their coding gene ID
# using the dict generated by annotation_to_csv (mapping protein names to coding gene ID)
# Protein nodes are NOT included in the Neo4j data format
# Instead, gene nodes are connected via "homolog" relations
# Clustering was performed by MCL with different inflation values
# Higher inflation values create smaller clusters
# Each homolog relation include the inflation value as attribute
import os
import itertools as iter


class ClusterToCSV:
    def __init__(self, CSV_path, perc_match_dict, type):
        self.CSV_path = CSV_path
        self.perc_match_dict = perc_match_dict
        self.type = type
        # Initialize output file
        if type == "nucl":
            with open(self.CSV_path, "w") as csv_file:
                csv_file.write(":START_ID(Gene),clstr_sens,perc_match,:END_ID(Gene)\n")
        elif type == "prot":
            with open(self.CSV_path, "w") as csv_file:
                csv_file.write(":START_ID(Protein),clstr_sens,perc_match,:END_ID(Protein)\n")


    # Convert a MCL cluster file into Neo4j relations coded in CSV format
    # File names are predefined by DB-Builder
    # Iterate over all cluster files, one for each inflation_value
    def create_csv(self, mcl_clstr_path, mcl_clstr_sens):
        with open(self.CSV_path, "a") as csv_file:
            with open(mcl_clstr_path, "r") as mcl_cluster_file:
                for line in mcl_cluster_file:
                    cluster = line.strip().split("\t")
                    # Skip empty lines
                    if not cluster: continue
                    #  Make all possible pairwise combinations between IDs
                    # i.e. [1,2,3] --> [(1,1),(1,2),(1,3),(2,1),(2,2),(2,3),(3,1),(3,2),(3,3)]
                    cluster_pw_comb = iter.product(cluster, repeat=2)
                    # Add g or p to ID
                    if self.type == "nucl":
                        cluster_pw_comb = [("g"+item[0],"g"+item[1]) for item  in cluster_pw_comb]
                    if self.type == "prot":
                        cluster_pw_comb = [("p"+item[0],"p"+item[1]) for item  in cluster_pw_comb]
                    for homolog_pair in cluster_pw_comb:
                        csv_file.write(",".join([homolog_pair[0], str(mcl_clstr_sens),
                                                 str(self.perc_match_dict.get(homolog_pair[0]+"_"+homolog_pair[1],"NA")),
                                                 str(homolog_pair[1])+"\n"]))





