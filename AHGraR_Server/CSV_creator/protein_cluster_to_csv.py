# Convert protein homology clustering into a CSV file format
# that can be imported by Neo4j
# Protein names in homology group are mapped to their coding gene ID
# using the dict generated by annotation_to_csv (mapping protein names to coding gene ID)
# Protein nodes are NOT included in the Neo4j data format
# Instead, gene nodes are connected via "homolog" relations
# Clustering was performed by MCL with different inflation values
# Higher inflation values create smaller clusters
# Each homolog relation include the inflation value as attribute
import os
import json
import itertools as iter


class ClusterToCSV:
    def __init__(self, proj_id):
        # Ensure proj_id is string
        proj_id = str(proj_id)
        # Define paths to project folders
        self.file_path = os.path.join("Projects", proj_id, "Files")
        self.CSV_path = os.path.join("Projects", proj_id, "CSV")
        self.blast_path = os.path.join("Projects", proj_id, "BlastDB")
        # Initialize an empty dict
        # All project-specific protein dicts will be added to a cumulative dict:
        self.protein_dict = {}
        # Initialize output file
        with open(os.path.join(self.CSV_path, "protein_hmlg.csv"), "w") as csv_file:
            csv_file.write(":START_ID(Protein),sensitivity,:END_ID(Protein)\n")

    # Add a species-specific protein dict to the cumulative dict
    # Function parameter is the species name needed to retrieve the json-stored dict from the project CSV directory
    def add_protein_dict(self, species_name):
        with open(os.path.join(self.CSV_path, species_name+"_protein_dict.json"), "r") as json_file:
            species_protein_dict = json.load(json_file)
        self.protein_dict.update(species_protein_dict)
        print("New cumulative protein dict length: "+str(len(self.protein_dict)))


    # Convert a MCL cluster file into Neo4j relations coded in CSV format
    # File names are predefined by DB-Builder
    # Iterate over all cluster files, one for each inflation_value
    def create_csv(self):
        for cluster_file_name in [("protein_cluster_1.4.clstr", "1.4"), ("protein_cluster_2.0.clstr", "2.0"),
                                  ("protein_cluster_4.0.clstr", "4.0"), ("protein_cluster_6.0.clstr", "6.0"),
                                  ("protein_cluster_8.0.clstr", "8.0"), ("protein_cluster_10.0.clstr", "10.0")]:
            # Collect all pairwise homology relations in pairwise_homologs_list
            print("Working on cluster "+cluster_file_name[1])
            pairwise_homologs_list = []
            with open(os.path.join(self.blast_path, cluster_file_name[0]), "r") as mcl_cluster_file:
                for line in mcl_cluster_file:
                    protein_cluster = line.strip().split("\t")
                    # Skip empty lines
                    if not protein_cluster: continue
                    # Map protein name to protein node id
                    protein_id_cluster = [self.protein_map[protein_name][0] for protein_name in protein_cluster]
                    #  Make all possible pairwise combinations between gene IDs
                    # i.e. [1,2,3] --> [(1,1),(1,2),(1,3),(2,1),(2,2),(2,3),(3,1),(3,2),(3,3)]
                    protein_id_cluster_pw_comb = iter.product(protein_id_cluster, repeat=2)
                    # Collect all pairwise homolog relations in pairwise_homologs_list
                    pairwise_homologs_list.extend(protein_id_cluster_pw_comb)
            # Ensure that the set of pairwise homologs is unique
            print(pairwise_homologs_list[:10])
            pairwise_homologs_unique_set = list(set(pairwise_homologs_list))
            with open(os.path.join(self.CSV_path, "protein_hmlg.csv"), "a") as csv_file:
                # Write each pairwise homolog relationship between two protein node IDS
                # into the CSV file.
                # Format: Protein_ID1,inflation_value,Protein_ID2
                for pairwise_homolog in pairwise_homologs_unique_set:
                    csv_file.write(",".join([str(pairwise_homolog[0]), cluster_file_name[1], str(pairwise_homolog[1])+"\n"]))




